# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import flservice_pb2 as flservice__pb2


class FlserviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainModel = channel.stream_stream(
                '/flservice.Flservice/TrainModel',
                request_serializer=flservice__pb2.TrainRequest.SerializeToString,
                response_deserializer=flservice__pb2.TrainResponse.FromString,
                )
        self.TerminateModelTraining = channel.unary_unary(
                '/flservice.Flservice/TerminateModelTraining',
                request_serializer=flservice__pb2.ModelSelection.SerializeToString,
                response_deserializer=flservice__pb2.StatusMessage.FromString,
                )
        self.ObserverModelTraining = channel.unary_stream(
                '/flservice.Flservice/ObserverModelTraining',
                request_serializer=flservice__pb2.ModelSelection.SerializeToString,
                response_deserializer=flservice__pb2.TrainResponse.FromString,
                )


class FlserviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrainModel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateModelTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ObserverModelTraining(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlserviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainModel': grpc.stream_stream_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=flservice__pb2.TrainRequest.FromString,
                    response_serializer=flservice__pb2.TrainResponse.SerializeToString,
            ),
            'TerminateModelTraining': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateModelTraining,
                    request_deserializer=flservice__pb2.ModelSelection.FromString,
                    response_serializer=flservice__pb2.StatusMessage.SerializeToString,
            ),
            'ObserverModelTraining': grpc.unary_stream_rpc_method_handler(
                    servicer.ObserverModelTraining,
                    request_deserializer=flservice__pb2.ModelSelection.FromString,
                    response_serializer=flservice__pb2.TrainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flservice.Flservice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Flservice(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrainModel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/flservice.Flservice/TrainModel',
            flservice__pb2.TrainRequest.SerializeToString,
            flservice__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateModelTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flservice.Flservice/TerminateModelTraining',
            flservice__pb2.ModelSelection.SerializeToString,
            flservice__pb2.StatusMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ObserverModelTraining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flservice.Flservice/ObserverModelTraining',
            flservice__pb2.ModelSelection.SerializeToString,
            flservice__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FLClientTrainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainForRound = channel.stream_stream(
                '/flservice.FLClientTrainService/TrainForRound',
                request_serializer=flservice__pb2.ClientModelMessage.SerializeToString,
                response_deserializer=flservice__pb2.ClientModelMessage.FromString,
                )


class FLClientTrainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrainForRound(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FLClientTrainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainForRound': grpc.stream_stream_rpc_method_handler(
                    servicer.TrainForRound,
                    request_deserializer=flservice__pb2.ClientModelMessage.FromString,
                    response_serializer=flservice__pb2.ClientModelMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flservice.FLClientTrainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FLClientTrainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrainForRound(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/flservice.FLClientTrainService/TrainForRound',
            flservice__pb2.ClientModelMessage.SerializeToString,
            flservice__pb2.ClientModelMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
